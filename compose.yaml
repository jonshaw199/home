services:
  db:
    image: "postgres"
    hostname: home-db
    ports:
      - "5432:5432"
    env_file:
      - ./services/db/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data # Mount volume for DB data persistence
    networks:
      - home_network
    restart: unless-stopped

  redis:
    image: "redis:7"
    hostname: home-redis
    ports:
      - "6379:6379"
    networks:
      - home_network
    restart: unless-stopped

  api:
    build: ./services/home
    hostname: home-api
    volumes:
      - ./services/home:/code
    ports:
      - "8000:8000"
    env_file:
      - ./services/home/.env
      - ./.env
    depends_on:
      - db
      - redis
    networks:
      - home_network
    restart: unless-stopped

  mqtt-broker:
    hostname: home-mqtt-broker
    build: ./services/mqtt-broker
    ports:
      - "1883:1883"
    networks:
      - home_network
    restart: unless-stopped

  controller:
    hostname: home-controller
    build: ./services/controller
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./services/controller:/code
    env_file:
      - ./services/controller/.env
      - ./services/controller/.env.${HOME_ENV:-production}
    depends_on:
      mqtt-broker:
        condition: service_started
    networks:
      - home_network
    restart: unless-stopped

  system-reporter:
    build:
      context: ./services/system-reporter
      dockerfile: Dockerfile.${HOME_ENV:-production}
      args:
        HOME_HOSTNAME: ${HOME_HOSTNAME}
    volumes:
      - ./services/system-reporter:/app
    env_file:
      - ./services/system-reporter/.env.${HOME_ENV:-production}
    networks:
      - home_network
    restart: unless-stopped
    profiles:
      - optional

  client:
    hostname: home-client
    build:
      context: ./client
      dockerfile: Dockerfile.${HOME_ENV:-production}
      args:
        HOME_HOSTNAME: ${HOME_HOSTNAME}
    volumes:
      - ./client:/app
    networks:
      - home_network
    ports:
      - "3002:80"
    expose:
      - "80"
    restart: unless-stopped

  avahi:
    build: ./services/avahi
    network_mode: host # Required for Avahi to broadcast over the LAN
    cap_add:
      - NET_ADMIN
      - NET_BROADCAST
    restart: unless-stopped
    env_file:
      - ./.env

networks:
  home_network:
    driver: bridge

volumes:
  postgres_data: # Define the postgres_data volume
