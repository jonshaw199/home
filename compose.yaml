services:
  db:
    image: "postgres"
    ports:
      - "5432:5432"
    env_file:
      - ./services/db/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data # Mount volume for DB data persistence
    deploy:
      resources:
        limits:
          cpus: "0.25"
    cpuset: "0"
    networks:
      - home_network
    restart: unless-stopped

  redis:
    image: "redis:7"
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: "0.25"
    cpuset: "1"
    networks:
      - home_network
    restart: unless-stopped

  home:
    build: ./services/home
    volumes:
      - ./services/home:/code
    ports:
      - "8000:8000"
    env_file:
      - ./services/home/.env
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://home:8000/api/"]
      interval: 5s
      timeout: 2s
      retries: 40
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
    cpuset: "2"
    networks:
      - home_network
    restart: unless-stopped

  mqtt-broker:
    build: ./services/mqtt-broker
    ports:
      - "1883:1883"
    deploy:
      resources:
        limits:
          cpus: "0.25"
    cpuset: "3"
    networks:
      - home_network
    restart: unless-stopped

  controller:
    build: ./services/controller
    volumes:
      - ./services/controller:/code
    depends_on:
      home:
        condition: service_healthy
      mqtt-broker:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "0.25"
    cpuset: "0"
    networks:
      - home_network
    restart: unless-stopped

  system-reporter:
    build:
      context: ./services/system-reporter
      dockerfile: Dockerfile.${HOME_ENV:-production}
    volumes:
      - ./services/system-reporter:/app
    env_file:
      - ./services/system-reporter/.env.${HOME_ENV:-production}
    deploy:
      resources:
        limits:
          cpus: "0.25"
    cpuset: "1"
    networks:
      - home_network
    restart: unless-stopped
    profiles:
      - optional

  home-client:
    image: home-client
    container_name: home-client
    build:
      context: ./client
      dockerfile: Dockerfile.${HOME_ENV:-production}
    networks:
      - home_network
    ports:
      - "3002:80"
    expose:
      - "80"
    restart: unless-stopped

networks:
  home_network:
    driver: bridge

volumes:
  postgres_data: # Define the postgres_data volume
